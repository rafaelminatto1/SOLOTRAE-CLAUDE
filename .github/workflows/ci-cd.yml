name: FisioFlow CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ========================================
  # STAGE 1: Code Quality & Security
  # ========================================
  quality-check:
    runs-on: ubuntu-latest
    name: Code Quality & Security
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: Run TypeScript type check
        run: npm run type-check
        continue-on-error: false

      - name: Run Prettier check
        run: npm run format:check
        continue-on-error: false

      - name: Security audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Vulnerability scan with Snyk
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

  # ========================================
  # STAGE 2: Automated Testing
  # ========================================
  test:
    runs-on: ubuntu-latest
    needs: quality-check
    name: Automated Testing
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: fisioflow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: npm run test:unit
        env:
          CI: true

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        run: npm run test:integration
        env:
          CI: true
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/fisioflow_test
          REDIS_URL: redis://localhost:6379

      - name: Run E2E tests
        if: matrix.test-type == 'e2e'
        run: npm run test:e2e
        env:
          CI: true

      - name: Upload test coverage
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  # ========================================
  # STAGE 3: Build & Docker
  # ========================================
  build:
    runs-on: ubuntu-latest
    needs: [quality-check, test]
    name: Build Application
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Output image
        id: image
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  # ========================================
  # STAGE 4: Security Scanning
  # ========================================
  security:
    runs-on: ubuntu-latest
    needs: build
    name: Security Scanning
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # ========================================
  # STAGE 5: Deploy to Staging
  # ========================================
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, security]
    name: Deploy to Staging
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying ${{ needs.build.outputs.image }} to staging environment"
          # Add your staging deployment commands here

  # ========================================
  # STAGE 6: Deploy to Production
  # ========================================
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, security]
    name: Deploy to Production
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./

      - name: Notify deployment success
        if: success()
        run: |
          echo "âœ… Production deployment successful!"
          echo "ðŸš€ Application available at: https://fisioflow.vercel.app"

  # ========================================
  # STAGE 7: Post-Deploy Monitoring
  # ========================================
  post-deploy:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    name: Post-Deploy Monitoring
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      - name: Health check
        run: |
          sleep 30
          curl -f https://fisioflow.vercel.app/health || exit 1

      - name: Performance test
        run: |
          npx lighthouse-ci --upload.target=temporary-public-storage https://fisioflow.vercel.app

      - name: Notify team
        if: success()
        run: |
          echo "ðŸŽ‰ Deployment and health checks completed successfully!"
          echo "ðŸ“Š Performance metrics uploaded to Lighthouse CI"