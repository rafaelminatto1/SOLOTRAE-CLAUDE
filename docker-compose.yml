version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: fisioflow_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: fisioflow
      POSTGRES_USER: fisioflow_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_secure_password}
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fisioflow_user -d fisioflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fisioflow_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: fisioflow_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fisioflow_network

  # FisioFlow Application
  fisioflow_app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fisioflow_app
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5173
      HOSTNAME: 0.0.0.0
      DATABASE_URL: postgresql://fisioflow_user:${POSTGRES_PASSWORD:-your_secure_password}@postgres:5432/fisioflow
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379
      VITE_SUPABASE_URL: ${VITE_SUPABASE_URL}
      VITE_SUPABASE_ANON_KEY: ${VITE_SUPABASE_ANON_KEY}
      VITE_API_URL: ${VITE_API_URL:-http://localhost:5173}
    ports:
      - "5173:5173"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5173/health"]
      interval: 30s
      timeout: 10s
      start_period: 40s
      retries: 3
    volumes:
      - app_logs:/app/logs
      - app_temp:/app/temp
    networks:
      - fisioflow_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: fisioflow_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - fisioflow_app
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fisioflow_network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: fisioflow_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - fisioflow_network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: fisioflow_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-grafana_secure_password}
      GF_USERS_ALLOW_SIGN_UP: 'false'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - fisioflow_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  app_temp:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  fisioflow_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16