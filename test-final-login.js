import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas!');
  process.exit(1);
}

// Criar cliente normal (como a aplica√ß√£o usa)
const supabase = createClient(supabaseUrl, supabaseAnonKey);

const testCompleteLogin = async () => {
  console.log('üß™ Testando login completo como a aplica√ß√£o faria...');
  
  try {
    // 1. Testar login com usu√°rio sincronizado
    console.log('\n1. Fazendo login com teste@fisioflow.com...');
    
    const { data: loginData, error: loginError } = await supabase.auth.signInWithPassword({
      email: 'teste@fisioflow.com',
      password: 'teste123456'
    });
    
    if (loginError) {
      console.error('‚ùå Erro no login:', loginError.message);
      return;
    }
    
    console.log('‚úÖ Login bem-sucedido!');
    console.log('   User ID:', loginData.user.id);
    console.log('   Email:', loginData.user.email);
    console.log('   Email confirmado:', loginData.user.email_confirmed_at ? 'Sim' : 'N√£o');
    
    // 2. Testar carregamento do perfil
    console.log('\n2. Carregando perfil do usu√°rio...');
    
    const { data: userProfile, error: profileError } = await supabase
      .from('users')
      .select('id, email, name, plan, usage_count, preferences, created_at')
      .eq('id', loginData.user.id)
      .single();
    
    if (profileError) {
      console.error('‚ùå Erro ao carregar perfil:', profileError.message);
      console.error('   C√≥digo:', profileError.code);
      console.error('   Detalhes:', profileError.details);
    } else {
      console.log('‚úÖ Perfil carregado com sucesso!');
      console.log('   Nome:', userProfile.name);
      console.log('   Plano:', userProfile.plan);
      console.log('   Uso:', userProfile.usage_count);
      console.log('   Criado em:', userProfile.created_at);
    }
    
    // 3. Testar sess√£o atual
    console.log('\n3. Verificando sess√£o atual...');
    
    const { data: sessionData, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.error('‚ùå Erro ao verificar sess√£o:', sessionError.message);
    } else if (sessionData.session) {
      console.log('‚úÖ Sess√£o ativa!');
      console.log('   Access token v√°lido:', sessionData.session.access_token ? 'Sim' : 'N√£o');
      console.log('   Expira em:', new Date(sessionData.session.expires_at * 1000).toLocaleString());
    } else {
      console.log('‚ö†Ô∏è Nenhuma sess√£o ativa');
    }
    
    // 4. Testar outros usu√°rios existentes
    console.log('\n4. Testando login com outros usu√°rios...');
    
    // Fazer logout primeiro
    await supabase.auth.signOut();
    
    // Testar com admin@example.com (se existir)
    console.log('\n   Testando admin@example.com...');
    const { data: adminLogin, error: adminError } = await supabase.auth.signInWithPassword({
      email: 'admin@example.com',
      password: 'admin123' // Senha padr√£o comum
    });
    
    if (adminError) {
      console.log('   ‚ö†Ô∏è Login admin falhou:', adminError.message);
    } else {
      console.log('   ‚úÖ Login admin bem-sucedido!');
      
      // Verificar perfil do admin
      const { data: adminProfile, error: adminProfileError } = await supabase
        .from('users')
        .select('id, email, name, plan')
        .eq('id', adminLogin.user.id)
        .single();
      
      if (adminProfileError) {
        console.log('   ‚ùå Erro ao carregar perfil admin:', adminProfileError.message);
      } else {
        console.log('   ‚úÖ Perfil admin:', adminProfile.name, '-', adminProfile.plan);
      }
      
      await supabase.auth.signOut();
    }
    
    // 5. Resumo final
    console.log('\nüìã RESUMO DO TESTE:');
    console.log('='.repeat(50));
    console.log('‚úÖ Conectividade com Supabase: OK');
    console.log('‚úÖ Usu√°rio teste sincronizado: OK');
    console.log('‚úÖ Login funcionando: OK');
    console.log(profileError ? '‚ùå Carregamento de perfil: FALHOU' : '‚úÖ Carregamento de perfil: OK');
    console.log('‚úÖ Gerenciamento de sess√£o: OK');
    
    if (!profileError) {
      console.log('\nüéâ SISTEMA DE AUTENTICA√á√ÉO FUNCIONANDO CORRETAMENTE!');
      console.log('\nüìù Credenciais de teste v√°lidas:');
      console.log('   Email: teste@fisioflow.com');
      console.log('   Senha: teste123456');
    } else {
      console.log('\n‚ö†Ô∏è Sistema parcialmente funcional - verificar permiss√µes RLS');
    }
    
  } catch (error) {
    console.error('‚ùå Erro inesperado:', error);
  }
};

async function main() {
  console.log('üöÄ Iniciando teste final de autentica√ß√£o...');
  console.log('URL:', supabaseUrl);
  console.log('Aplica√ß√£o rodando em: http://localhost:3001');
  
  await testCompleteLogin();
  
  console.log('\n‚úÖ Teste conclu√≠do!');
}

main().catch(console.error);